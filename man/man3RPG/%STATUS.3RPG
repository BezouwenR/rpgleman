.\" Copyright 2017 Andreas Louv <andreas@louv.dk>
.\" All content is copyright IBM
.\" Original URL: https://www.ibm.com/support/knowledgecenter/ssw_ibm_i_73/rzasd/bbstat.htm?view=embed
.\"
.\" This man page is generated with ``rpgleman''
.\" Project URL: https://github.com/andlrc/rpgleman
.\"
.TH STATUS 3RPG  "June 2012" "ILE RPG Language Reference"
.SH NAME
%STATUS - Return File or Program Status
.SH SYNOPSIS
.nf
%STATUS{(file_name)}
.fi
.SH DESCRIPTION
\fB%STATUS\fR starts with a return value of 00000 and is reset to 00000 before any operation with an
\[char39]E\[char39] extender specified begins\[char46]


\fB%STATUS\fR is best checked immediately after an operation with the \[char39]E\[char39] extender
or an error indicator specified, or at the beginning of an \fIINFSR\fR or the \fI*PSSR\fR
subroutine\[char46]


For more information, see File Operations, Result Operations, or Built-in Functions\[char46]


The operations that set \fB%STATUS\fR are: 
.IP "" 2
.RS
\[bu] \fIACQ\fR (Acquire)
.RE
.IP "" 2
.RS
\[bu] \fIADDDUR\fR (Add Duration)
.RE
.IP "" 2
.RS
\[bu] \fIALLOC\fR (Allocate Storage)
.RE
.IP "" 2
.RS
\[bu] \fICALL\fR (Call a Program)
.RE
.IP "" 2
.RS
\[bu] \fICALLB\fR (Call a Bound Procedure)
.RE
.IP "" 2
.RS
\[bu] \fICALLP\fR (Call a Prototyped Procedure or Program)
.RE
.IP "" 2
.RS
\[bu] \fICHAIN\fR (Random Retrieval from a File)
.RE
.IP "" 2
.RS
\[bu] \fICHECK\fR (Check Characters)
.RE
.IP "" 2
.RS
\[bu] \fICHECKR\fR (Check Reverse)
.RE
.IP "" 2
.RS
\[bu] \fICLOSE\fR (Close Files)
.RE
.IP "" 2
.RS
\[bu] \fICOMMIT\fR (Commit)
.RE
.IP "" 2
.RS
\[bu] \fIDEALLOC\fR (Free Storage)
.RE
.IP "" 2
.RS
\[bu] \fIDELETE\fR (Delete Record)
.RE
.IP "" 2
.RS
\[bu] \fIDSPLY\fR (Display Message)
.RE
.IP "" 2
.RS
\[bu] \fIEXFMT\fR (Write/Then Read Format)
.RE
.IP "" 2
.RS
\[bu] \fIEXTRCT\fR (Extract Date/Time/Timestamp)
.RE
.IP "" 2
.RS
\[bu] \fIFEOD\fR (Force End of Data)
.RE
.IP "" 2
.RS
\[bu] IN (Retrieve a Data Area)
.RE
.IP "" 2
.RS
\[bu] \fINEXT\fR (Next)
.RE
.IP "" 2
.RS
\[bu] \fIOCCUR\fR (Set/Get Occurrence of a Data Structure)
.RE
.IP "" 2
.RS
\[bu] \fIOPEN\fR (Open File for Processing)
.RE
.IP "" 2
.RS
\[bu] \fIOUT\fR (Write a Data Area)
.RE
.IP "" 2
.RS
\[bu] \fIPOST\fR (Post)
.RE
.IP "" 2
.RS
\[bu] \fIREAD\fR (Read a Record)
.RE
.IP "" 2
.RS
\[bu] \fIREADC\fR (Read Next Changed Record)
.RE
.IP "" 2
.RS
\[bu] \fIREADE\fR (Read Equal Key)
.RE
.IP "" 2
.RS
\[bu] \fIREADP\fR (Read Prior Record)
.RE
.IP "" 2
.RS
\[bu] \fIREADPE\fR (Read Prior Equal)
.RE
.IP "" 2
.RS
\[bu] \fIREALLOC\fR (Reallocate Storage with New Length)
.RE
.IP "" 2
.RS
\[bu] \fIREL\fR (Release)
.RE
.IP "" 2
.RS
\[bu] \fIRESET\fR (Reset)
.RE
.IP "" 2
.RS
\[bu] \fIROLBK\fR (Roll Back)
.RE
.IP "" 2
.RS
\[bu] \fISCAN\fR (Scan String)
.RE
.IP "" 2
.RS
\[bu] \fISETGT\fR (Set Greater Than)
.RE
.IP "" 2
.RS
\[bu] \fISETLL\fR (Set Lower Limit)
.RE
.IP "" 2
.RS
\[bu] \fISUBDUR\fR (Subtract Duration)
.RE
.IP "" 2
.RS
\[bu] \fISUBST\fR (Substring)
.RE
.IP "" 2
.RS
\[bu] \fITEST\fR (Test Date/Time/Timestamp)
.RE
.IP "" 2
.RS
\[bu] \fIUNLOCK\fR (Unlock a Data Area or Release a Record)
.RE
.IP "" 2
.RS
\[bu] \fIUPDATE\fR (Modify Existing Record)
.RE
.IP "" 2
.RS
\[bu] \fIWRITE\fR (Create New Records)
.RE
.IP "" 2
.RS
\[bu] \fIXLATE\fR (Translate)
.RE
.PP

.SH RETURN VALUE
\fB%STATUS\fR returns the most recent value set for the program or file status\[char46]
\fB%STATUS\fR is set whenever the program status or any file status changes, usually when an error
occurs\[char46]


If \fB%STATUS\fR is used without the optional file_name parameter, then it returns the program or
file status most recently changed\[char46] If a file is specified, the value contained in the
\fIINFDS\fR \fI*STATUS\fR field for the specified file is returned\[char46] The \fIINFDS\fR does not
have to be specified for the file\[char46]

.SH EXAMPLE
\fB%STATUS\fR and \fB%ERROR\fR with \[char39]E\[char39] Extender
.PP
.nf
 *\[char46]\[char46]1\[char46]\[char46]\[char46]\[char46]+\[char46]\[char46]\[char46]\[char46]2\[char46]\[char46]\[char46]\[char46]+\[char46]\[char46]\[char46]\[char46]3\[char46]\[char46]\[char46]\[char46]+\[char46]\[char46]\[char46]\[char46]4\[char46]\[char46]\[char46]\[char46]+\[char46]\[char46]\[char46]\[char46]5\[char46]\[char46]\[char46]\[char46]+\[char46]\[char46]\[char46]\[char46]6\[char46]\[char46]\[char46]\[char46]+\[char46]\[char46]\[char46]\[char46]7\[char46]\[char46]\[char46]+\[char46]\[char46]\[char46]\[char46]
 * The \[char39]E\[char39] extender indicates that if an error occurs, the error
 * is to be handled as though an error indicator were coded\[char46]
 * The success of the operation can then be checked using the
 * %ERROR built-in function\[char46]  The status associated with the error
 * can be checked using the %STATUS built-in function\[char46]
 /FREE
    exfmt(e) InFile;
    if %error;
       exsr CheckError;
    endif;

  //-------------------------------------------------------------------
  // CheckError: Subroutine to process a file I/O error
  //-------------------------------------------------------------------
    begsr CheckError;
       select;
       when  %status < 01000;

          // No error occurred
       when  %status = 01211;
          // Attempted to read a file that was not open
          exsr InternalError;

       when  %status = 01331;
          // The wait time was exceeded for a READ operation
          exsr TimeOut;

       when  %status = 01261;
          // Operation to unacquired device
          exsr DeviceError;

       when  %status = 01251;
          // Permanent I/O error
          exsr PermError;

       other;
          // Some other error occurred
          exsr FileError;
       endsl;
    endsr;
 /END-FREE
.fi

.SH EXAMPLE
\fB%STATUS\fR and \fB%ERROR\fR with \[char39]E\[char39] Extender, Error Indicator and
\fI*PSSR\fR
.PP
.nf
DName+++++++++++ETDsFrom+++To/L+++IDc\[char46]Keywords++++++++++++++++++++++++++
D Zero            S              5P 0 INZ(0)
CL0N01Factor1+++++++Opcode(E)+Factor2+++++++Result++++++++Len++D+HiLoEq\[char46]\[char46]\[char46]\[char46]
 * %STATUS starts with a value of 0
 *
 * The following SCAN operation will cause a branch to the *PSSR
 * because the start position has a value of 0\[char46]
C     \[char39]A\[char39]           SCAN      \[char39]ABC\[char39]:Zero    Pos
C     BAD_SCAN      TAG
 * The following EXFMT operation has an \[char39]E\[char39] extender, so %STATUS will
 * be set to 0 before the operation begins\[char46]  Therefore, it is
 * valid to check %STATUS after the operation\[char46]
 * Since the \[char39]E\[char39] extender was coded, %ERROR can also be used to
 * check if an error occurred\[char46]
C                   EXFMT(E)  REC1
C                   IF        %ERROR
C                   SELECT
C                   WHEN      %STATUS = 01255
C \[char46]\[char46]\[char46]
C                   WHEN      %STATUS = 01299
C \[char46]\[char46]\[char46]
 * The following scan operation has an error indicator\[char46]  %STATUS will
 * not be set to 0 before the operation begins, but %STATUS can be
 * reasonably checked if the error indicator is on\[char46]
C     \[char39]A\[char39]           SCAN      \[char39]ABC\[char39]:Zero    Pos                    10
C                   IF        *IN10 AND %STATUS = 00100
C \[char46]\[char46]\[char46]

 * The following scan operation does not produce an error\[char46]
 * Since there is no \[char39]E\[char39] extender %STATUS will not be set to 0,
 * so it would return a value of 00100 from the previous error\[char46]
 * Therefore, it is unwise to use %STATUS after an operation that
 * does not have an error indicator or the \[char39]E\[char39] extender coded since
 * you cannot be sure that the value pertains to the previous
 * operation\[char46]
C     \[char39]A\[char39]           SCAN      \[char39]ABC\[char39]         Pos
C \[char46]\[char46]\[char46]
C     *PSSR         BEGSR
 * %STATUS can be used in the *PSSR since an error must have occurred\[char46]
C                   IF        %STATUS = 00100
C                   GOTO      BAD_SCAN
C \[char46]\[char46]\[char46]
.fi
.SH SEE ALSO
.BR %ERROR,
.BR ABC,
.BR ACQ,
.BR ADDDUR,
.BR ALLOC,
.BR AND,
.BR BAD,
.BR BEGSR,
.BR CALL,
.BR CALLB,
.BR CALLP,
.BR CHAIN,
.BR CHECK,
.BR CHECKR,
.BR CLOSE,
.BR COMMIT,
.BR DEALLOC,
.BR DELETE,
.BR DSPLY,
.BR END-FREE,
.BR ETD,
.BR EXFMT,
.BR EXTRCT,
.BR FEOD,
.BR FREE,
.BR GOTO,
.BR INFDS,
.BR INFSR,
.BR INZ,
.BR NEXT,
.BR OCCUR,
.BR OPEN,
.BR OUT,
.BR POST,
.BR READ,
.BR READC,
.BR READE,
.BR READP,
.BR READPE,
.BR REALLOC,
.BR REC,
.BR REL,
.BR RESET,
.BR ROLBK,
.BR SCAN,
.BR SELECT,
.BR SETGT,
.BR SETLL,
.BR SSR,
.BR SUBDUR,
.BR SUBST,
.BR TAG,
.BR TATUS,
.BR TEST,
.BR UNLOCK,
.BR UPDATE,
.BR WHEN,
.BR WRITE,
.BR XLATE
