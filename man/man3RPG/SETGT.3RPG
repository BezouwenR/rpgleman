.\" Copyright 2017 Andreas Louv <andreas@louv.dk>
.\" All content is copyright IBM
.\" Original URL: https://www.ibm.com/support/knowledgecenter/ssw_ibm_i_73/rzasd/zzsetgt.htm?view=embed
.\"
.\" This man page is generated with ``rpgleman''
.\" Project URL: https://github.com/andlrc/rpgleman
.\"
.TH SETGT 3RPG  "June 2012" "ILE RPG Language Reference"
.SH NAME
SETGT - Set Greater Than
.SH DESCRIPTION
.TS
allbox;
l l  .
T{
Free-Form Syntax
T}	T{
\fISETGT\fR{(\fIEHMR\fR)} search-arg name
T}
.TE

.TS
allbox;
l l l l l l l  .
T{
\fISETGT\fR (E)
T}	T{
search-arg
T}	T{
name (file or record format)
T}	T{
Â
T}	T{
NR
T}	T{
ER
T}	T{
_
T}
.TE

The \fISETGT\fR operation positions a file at the next record with a key or relative record number that is greater than the key or relative record number specified in factor 1\[char46] The file must be a full procedural file\[char46]


The search argument, search-arg, must be the key or relative record number used to retrieve the record\[char46] If access is by key, search-arg can be a a single key in the form of a field name, a named constant, a figurative constant, or a literal\[char46] See Figure 2 for an example of searching key fields\[char46]


If the file is an externally-described file, search-arg can also be a composite key in the form of a \fIKLIST\fR name, a list of values, or \fB%KDS\fR\[char46] For keys specified using a \fIKLIST\fR, key fields must have the same \fICCSID\fR as the key in the file\[char46] See the example at the end of \fB%KDS\fR (Search Arguments in Data Structure) for an illustration of search arguments in a data structure\[char46] If access is by relative record number, search-arg must be an integer literal or a numeric field with zero decimal positions\[char46]


The name operand is required and must be either a file name or a record format name\[char46] A record format name is allowed only with an externally described file\[char46]


You can specify an indicator in positions 71-72 that is set on if no record is found with a key or relative record number that is greater than the search argument specified (search-arg)\[char46] This information can also be obtained from the \fB%FOUND\fR built-in function, which returns \[char39]0\[char39] if no record is found, and \[char39]1\[char39] if a record is found\[char46]\[char46]


To handle \fISETGT\fR exceptions (file status codes greater than 1000), either the operation code extender \[char39]E\[char39] or an error indicator ER can be specified, but not both\[char46] For more information on error handling, see File Exception/Errors\[char46]


If the \fISETGT\fR operation is not successful (no-record-found condition), the file is positioned to the end of the file\[char46]


Use \fI*END\fR with the \fISETLL\fR operation to position to the last record in the file\[char46]


Figurative constants can also be used to position the file\[char46] 



When used with a file with a composite key, figurative constants are treated as though each field of the key contained the figurative constant value\[char46] In most cases, \fI*LOVAL\fR positions the file so that the first read retrieves the record with the lowest key\[char46] In most cases, \fI*HIVAL\fR positions the file so that a \fIREAD\fR receives an end-of-file indication; a subsequent \fIREADP\fR retrieves the last record in the file\[char46] However, note the following cases for using \fI*LOVAL\fR and \fI*HIVAL\fR: 
.IP "" 2
.RS
\[bu] With an externally described file that has a key in descending order, \fI*HIVAL\fR positions the file so that the first read operation retrieves the first record in the file (the record with the highest key), and \fI*LOVAL\fR positions the file so that a \fIREADP\fR operation retrieves the last record in the file (the record with the lowest key)\[char46]
.RE
.IP "" 2
.RS
\[bu] If a record is added or a key field is altered after a \fISETGT\fR operation with either \fI*LOVAL\fR or \fI*HIVAL\fR, the file may no longer be positioned to the record with the lowest or highest key\[char46] key value Xâ99\[char46]\[char46]\[char46]9Dâ and \fI*HIVAL\fR for numeric keys represents a key value Xâ99\[char46]\[char46]\[char46]9Fâ\[char46] If the keys are float numeric, \fI*LOVAL\fR and \fI*HIVAL\fR are defined differently\[char46] See Figurative Constants \[char46] When a program described file has a packed decimal key specified in the file specifications but the actual file key field contains character data, records may have keys that are less than \fI*LOVAL\fR or greater than \fI*HIVAL\fR\[char46] When a key field contains unsigned binary data, \fI*LOVAL\fR may not be the lowest key\[char46]
.RE
.PP


When \fI*LOVAL\fR or \fI*HIVAL\fR are used with key fields with a Date or Time data type, the values are dependent of the Date-Time format used\[char46] For details on these values please see Data Types and Data Formats\[char46]


Following the \fISETGT\fR operation, a file is positioned so that it is immediately before the first record whose key or relative record number is greater than the search argument specified (search-arg)\[char46] You retrieve this record by reading the file\[char46] Before you read the file, however, records may be deleted from the file by another job or through another file in your job\[char46] Thus, you may not get the record you expected\[char46] For information on preventing unexpected modification of your files, see the discussion of allocating objects in the \fIIBM\fRÂ® i Information Center Programming topic at \fIURL\fR http://www\[char46]ibm\[char46]com/systems/i/infocenter/\[char46]


See Database Null Value Support for information on handling records with null-capable fields and keys\[char46]


For more information, see File Operations\[char46]

.SH NOTICE
Note:  Operation code extenders H, M, and R are allowed only when the search argument is a list or is \fB%KDS()\fR\[char46]
.SH EXAMPLE
\fISETGT\fR Operation
.PP
.nf
*\[char46]\[char46]\[char46]1\[char46]\[char46]\[char46]\[char46]+\[char46]\[char46]\[char46]\[char46]2\[char46]\[char46]\[char46]\[char46]+\[char46]\[char46]\[char46]\[char46]3\[char46]\[char46]\[char46]\[char46]+\[char46]\[char46]\[char46]\[char46]4\[char46]\[char46]\[char46]\[char46]+\[char46]\[char46]\[char46]\[char46]5\[char46]\[char46]\[char46]\[char46]+\[char46]\[char46]\[char46]\[char46]6\[char46]\[char46]\[char46]\[char46]+\[char46]\[char46]\[char46]\[char46]7\[char46]\[char46]\[char46]+\[char46]\[char46]\[char46]\[char46]
CL0N01Factor1+++++++Opcode(E)+Factor2+++++++Result++++++++Len++D+HiLoEq\[char46]\[char46]\[char46]\[char46]
 *  This example shows how to position the file so READ will read
 *  the next record\[char46] The search argument, KEY, specified for the
 *  SETGT operation has a value of 98; therefore, SETGT positions
 *  the file before the first record of file format FILEA that
 *  has a key field value greater than 98\[char46]  The file is positioned
 *  before the first record with a key value of 100\[char46]  The READ
 *  operation reads the record that has a value of 100 in its key
 *  field\[char46]
C
C     KEY           SETGT     FILEA
C                   READ      FILEA                                  64
 *
 *  This example shows how to read the last record of a group of
 *  records with the same key value and format from a program
 *  described file\[char46]  The search argument, KEY, specified for the
 *  SETGT operation positions the file before the first record of
 *  file FILEB that has a key field value greater than 70\[char46]
 *  The file is positioned before the first record with a key
 *  value  of 80\[char46]  The READP operation reads the last record that
 *  has a value of 70 in its key field\[char46]
C
C     KEY           SETGT     FILEB
C                   READP     FILEB                                  64
.fi



.SH EXAMPLE

.PP
.nf
*\[char46]\[char46]\[char46]1\[char46]\[char46]\[char46]\[char46]+\[char46]\[char46]\[char46]\[char46]2\[char46]\[char46]\[char46]\[char46]+\[char46]\[char46]\[char46]\[char46]3\[char46]\[char46]\[char46]\[char46]+\[char46]\[char46]\[char46]\[char46]4\[char46]\[char46]\[char46]\[char46]+\[char46]\[char46]\[char46]\[char46]5\[char46]\[char46]\[char46]\[char46]+\[char46]\[char46]\[char46]\[char46]6\[char46]\[char46]\[char46]\[char46]+\[char46]\[char46]\[char46]\[char46]7\[char46]\[char46]\[char46]+\[char46]\[char46]\[char46]\[char46]
CL0N01Factor1+++++++Opcode(E)+Factor2+++++++Result++++++++Len++D+HiLoEq\[char46]\[char46]\[char46]\[char46]
 *
 *  This example shows the use of *LOVAL\[char46]  The SETLL operation
 *  positions the file before the first record of a file in
 *  ascending order\[char46]  The READ operation reads the first record
 *  (key value 97)\[char46]
C
C     *LOVAL        SETLL     RECDA
C                   READ      RECDA                                  64
C
 *  This example shows the use of *HIVAL\[char46]  The SETGT operation
 *  positions the file after the last record of a file in ascending
 *  order\[char46] The READP operation reads the last record (key value 91)\[char46]
C
C     *HIVAL        SETGT     RECDB
C                   READP     RECDB                                  64
.fi


.SH SEE ALSO
.BR %FOUND,
.BR %KDS,
.BR CCSID,
.BR EHMR,
.BR FILEA,
.BR FILEB,
.BR IBM,
.BR IVAL,
.BR KEY,
.BR KLIST,
.BR OVAL,
.BR READ,
.BR READP,
.BR RECDA,
.BR RECDB,
.BR SETGT,
.BR SETLL,
.BR URL
