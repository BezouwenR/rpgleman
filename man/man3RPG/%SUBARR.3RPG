.\" Copyright 2017 Andreas Louv <andreas@louv.dk>
.\" All content is copyright IBM
.\" Original URL: https://www.ibm.com/support/knowledgecenter/ssw_ibm_i_73/rzasd/bbsubarr.htm?view=embed
.\"
.\" This man page is generated with ``rpgleman''
.\" Project URL: https://github.com/andlrc/rpgleman
.\"
.TH SUBARR 3RPG  "June 2012" "ILE RPG Language Reference"
.SH NAME
%SUBARR - Set/Get Portion of an Array
.SH SYNOPSIS
.nf
%SUBARR(array:start-index{:number-of-elements})
.fi
.SH DESCRIPTION
The first parameter of \fB%SUBARR\fR must be an array\[char46] That is, a standalone field, data
structure, or subfield defined as an array\[char46] The first parameter must not be a table name or
procedure call\[char46]


The start-index parameter must be a numeric value with zero decimal positions\[char46] A float
numeric value is not allowed\[char46] The value must be greater than or equal to 1 and less than or
equal to the number of elements of the array\[char46]


The optional number-of-elements parameter must be a numeric value with zero decimal
positions\[char46] A float numeric value is not allowed\[char46] The value must be greater than or
equal to 1 and less than or equal to the number of elements remaining in the array after applying
the start-index value\[char46]


Generally, \fB%SUBARR\fR is valid in any expression where an unindexed array is allowed\[char46]
However, \fB%SUBARR\fR cannot be used in the following places: 
.IP "" 2
.RS
\[bu] as the array argument of built-in function \fB%LOOKUPxx\fR
.RE
.IP "" 2
.RS
\[bu] as a parameter passed by reference
.RE
.PP
  \fB%SUBARR\fR may be used in the following ways: 
.IP "" 2
.RS
\[bu] On the left-hand side of an assignment using \fIEVAL\fR or \fIEVALR\fR\[char46] This changes the
specified elements in the specified array\[char46]
.RE
.IP "" 2
.RS
\[bu] Within the expression on the right-hand side of an assignment using \fIEVAL\fR or \fIEVALR\fR where
the target of the assignment is an array\[char46] This uses the values of the specified elements of
the array\[char46] The array elements are used directly; a temporary copy of the sub-array is not
made\[char46]
.RE
.IP "" 2
.RS
\[bu] In Extended Factor 2 of the \fISORTA\fR operation\[char46]
.RE
.IP "" 2
.RS
\[bu] In Extended Factor 2 of the \fIRETURN\fR operation\[char46]
.RE
.IP "" 2
.RS
\[bu] Passed by \fIVALUE\fR or by read-only reference (\fICONST\fR keyword) when the corresponding
parameter is defined as an array\[char46]
.RE
.IP "" 2
.RS
\[bu] As the parameter of the \fB%XFOOT\fR built-in function\[char46]
.RE
.PP


For more information, see Array Operations or Built-in Functions\[char46]

.SH RETURN VALUE
Built-in function \fB%SUBARR\fR returns a section of the specified array starting at
start-index\[char46] The number of elements returned is specified by the optional number-of-elements
parameter\[char46] If not specified, the number-of-elements defaults to the remainder of the
array\[char46]

.SH EXAMPLE
Using \fB%SUBARR\fR
.PP
.nf
D a               s             10i 0 dim(5)
D b               s             10i 0 dim(15)
D resultArr       s             10i 0 dim(20)
D sum             s             20i 0
 /free
     a(1)=9;
     a(2)=5;
     a(3)=16;
     a(4)=13;
     a(5)=3;
     // Copy part of an array to another array:
     resultArr = %subarr(a:4:n);
          // this is equivalent to:
          //   resultArr(1) = a(4)
          //   resultArr(2) = a(5)
          //   \[char46]\[char46]\[char46]
          //   resultArr(n) = a(4 + n - 1)

     // Copy part of an array to part of another array:
     %subarr(b:3:n) = %subarr(a:m:n);
     // Specifying the array from the start element to the end of the array
     // B has 15 elements and A has 5 elements\[char46]  Starting from element 2
     // in array A means that only 4 elements will be copied to array B\[char46]
     // The remaining elements in B will not be changed\[char46]
       b = %subarr(a : 2);

     // Sort a subset of an array:
     sorta %subarr(a:1:4);
          // Now, A=(5 9 13 16 3);
          // Since only 4 elements were sorted, the fifth element
          // is out of order\[char46]
          // Using %SUBARR in an implicit array indexing assignment
     resultArr = b + %subarr(a:2:3)
     // this is equivalent to:
     //   resultArr(1) = b(1) + a(2)
     //   resultArr(2) = b(2) + a(3)
     //   resultArr(3) = b(3) + a(4)

     // Using %SUBARR nested within an expression
     resultArr = %trim(%subst(%subarr(stringArr:i):j));
          // this is equivalent to:
          //   resultArr(1) = %trim(%subst(stringArr(i+0):j))
          //    resultArr(2) = %trim(%subst(stringArr(i+1):j))
          //   resultArr(3) = %trim(%subst(stringArr(i+2):j))

     // Sum a subset of an array
     sum = %xfoot (%subarr(a:2:3));
          // Now sum = 9 + 13 + 16 = 38
.fi

.SH EXAMPLE
Using \fB%SUBARR\fR with dynamically allocated arrays
.PP
.nf
// Using %SUBARR with dynamically allocated arrays
D dynArrInfo      ds                  qualified
D   numAlloc                    10i 0 inz(0)
D   current                     10i 0 inz(0)
D   p                             *
D dynArr          s              5a   dim(32767) based(dynArrInfo\[char46]p)
D otherArray      s              3a   dim(10) inz(\[char39]xy\[char39])
 /free
     // Start the array with an allocation of five elements,
     // and with two current elements
     dynArrInfo\[char46]numAlloc = 5;
     dynArrInfo\[char46]p = %alloc(%size(dynArr) *
                    dynarrInfo\[char46]numAlloc);
     dynArrInfo\[char46]current = 2;
     // Initialize to blanks
     %subarr(dynArr : 1 : dynarrInfo\[char46]current) = *blank;

     // Set the two elements to some values
     dynArr(1) = \[char39]Dog\[char39];
                     dynArr(2) = \[char39]Cat\[char39];

     // Sort the two elements
     sorta %subarr(dynArr : 1 : dynarrInfo\[char46]current);
          // dynArr(1) = \[char39]Cat\[char39]
          // dynArr(2) = \[char39]Dog\[char39]

     // Assign another array to the two elements
     otherArray(1) = \[char39]ab\[char39];
     otherArray(2) = \[char39]cd\[char39];
     otherArray(3) = \[char39]ef\[char39];
     %subarr(dynArr : 1 : dynarrInfo\[char46]current) = otherArray;
          // dynArr(1) = \[char39]ab\[char39]
          // dynArr(2) = \[char39]cd\[char39]

     // Changing the size of the array
     oldElems = dynArrInfo\[char46]current;
     dynArrInfo\[char46]current = 7;
     if (dynArrInfo\[char46]current > dynArrInfo\[char46]numAlloc);
          dynArrInfo\[char46]p = %realloc (dynArrInfo\[char46]p : dynArrInfo\[char46]current);
          dynArrInfo\[char46]numAlloc = dynArrInfo\[char46]current;
     endif;
     if (oldElems < dynArrInfo\[char46]current);
          // Initialize new elements to blanks
         clear %subarr(dynArr : oldElems + 1 : dynArrInfo\[char46]current - oldElems);
     endif;
.fi





For more information, see Built-in Functions\[char46]

.SH SEE ALSO
.BR %ALLOC,
.BR %LOOKUPXX,
.BR %REALLOC,
.BR %SIZE,
.BR %SUBST,
.BR %TRIM,
.BR %XFOOT,
.BR CAUTION,
.BR CONST,
.BR EVAL,
.BR EVALR,
.BR RETURN,
.BR SORTA,
.BR VALUE
