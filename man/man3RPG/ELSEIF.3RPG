.\" Copyright 2017 Andreas Louv <andreas@louv.dk>
.\" All content is copyright IBM
.\" Original URL: https://www.ibm.com/support/knowledgecenter/ssw_ibm_i_73/rzasd/zzelsif.htm?view=embed
.\"
.\" This man page is generated with ``rpgleman''
.\" Project URL: https://github.com/andlrc/rpgleman
.\"
.TH ELSEIF 3RPG  "June 2012" "ILE RPG Language Reference"
.SH NAME
ELSEIF - Else If
.SH DESCRIPTION
.TS
allbox;
l l  .
T{
Free-Form Syntax
T}	T{
\fIELSEIF\fR{(MR)} indicator-expression
T}
.TE

.TS
allbox;
l l l  .
T{
\fIELSEIF\fR (M/R)
T}	T{
Blank
T}	T{
indicator-expression
T}
.TE

The \fIELSEIF\fR operation is the combination of an \fIELSE\fR operation and an IF operation\[char46] It avoids the need for an additional level of nesting\[char46]


The IF operation code allows a series of operation codes to be processed if a condition is met\[char46] Its function is similar to that of the IFxx operation code\[char46] It differs in that the logical condition is expressed by an indicator valued expression (indicator-expression)\[char46] The operations controlled by the \fIELSEIF\fR operation are performed when the expression in the indicator-expression operand is true (and the expression for the previous IF or \fIELSEIF\fR statement was false)\[char46]


For information on how operation extenders M and R are used, see Precision Rules for Numeric Operations\[char46]


For more information, see Structured Programming Operations\[char46]

.SH EXAMPLE
\fIELSEIF\fR Operation
.PP
.nf
 *\[char46]\[char46]1\[char46]\[char46]\[char46]\[char46]+\[char46]\[char46]\[char46]\[char46]2\[char46]\[char46]\[char46]\[char46]+\[char46]\[char46]\[char46]\[char46]3\[char46]\[char46]\[char46]\[char46]+\[char46]\[char46]\[char46]\[char46]4\[char46]\[char46]\[char46]\[char46]+\[char46]\[char46]\[char46]\[char46]5\[char46]\[char46]\[char46]\[char46]+\[char46]\[char46]\[char46]\[char46]6\[char46]\[char46]\[char46]\[char46]+\[char46]\[char46]\[char46]\[char46]7\[char46]\[char46]\[char46]+\[char46]\[char46]\[char46]\[char46]
 /free

    IF keyPressed = HELPKEY;
       displayHelp();
    ELSEIF keyPressed = EXITKEY;
       return;
    ELSEIF keyPressed = ROLLUP OR keyPressed = ROLLDOWN;
       scroll (keyPressed);
    ELSE;
       signalError (\[char39]Key not defined\[char39]);
    ENDIF;

 /end-free
.fi
