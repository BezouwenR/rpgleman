.\" Copyright 2017 Andreas Louv <andreas@louv.dk>
.\" All content is copyright IBM
.\" Original URL: https://www.ibm.com/support/knowledgecenter/ssw_ibm_i_73/rzasd/bbelem.htm?view=embed
.\"
.\" This man page is generated with ``rpgleman''
.\" Project URL: https://github.com/andlrc/rpgleman
.\"
.TH ELEM 3RPG  "June 2012" "ILE RPG Language Reference"
.SH NAME
%ELEM - Get Number of Elements
.SH SYNOPSIS
.nf
%ELEM(table_name)
%ELEM(array_name)
%ELEM(multiple_occurrence_data_structure_name)
.fi
.SH DESCRIPTION
The parameter must be the name of an array, table, or multiple occurrence data structure\[char46]




 If the parameter is a complex-qualified name and the data structures containing the required
subfield are arrays, then the parameter may be specified in one of two
ways: 
.IP "" 2
.RS
\[bu] With indexes specified for all of the data structure arrays in the complex qualified
name\[char46]
.RE
.IP "" 2
.RS
\[bu] With indexes specified for none of the data structure arrays in the complex qualified
name\[char46]
.RE
.PP
  See \fB%ELEM\fR Example with a Complex Data Structure \[char46] 



For more information, see Array Operations or Built-in Functions\[char46]

.SH RETURN VALUE
\fB%ELEM\fR returns the number of elements in the specified array, table, or multiple-occurrence
data structure\[char46] The value returned is in unsigned integer format (type U)\[char46] It may be
specified anywhere a numeric constant is allowed in the definition specification or in an expression
in the extended factor 2 field\[char46]

.SH EXAMPLE
\fB%ELEM\fR Example
.PP
.nf
 *\[char46]\[char46]1\[char46]\[char46]\[char46]\[char46]+\[char46]\[char46]\[char46]\[char46]2\[char46]\[char46]\[char46]\[char46]+\[char46]\[char46]\[char46]\[char46]3\[char46]\[char46]\[char46]\[char46]+\[char46]\[char46]\[char46]\[char46]4\[char46]\[char46]\[char46]\[char46]+\[char46]\[char46]\[char46]\[char46]5\[char46]\[char46]\[char46]\[char46]+\[char46]\[char46]\[char46]\[char46]6\[char46]\[char46]\[char46]\[char46]+\[char46]\[char46]\[char46]\[char46]7\[char46]\[char46]\[char46]+\[char46]\[char46]\[char46]\[char46]
D*Name++++++++++ETDsFrom+++To/L+++IDc\[char46]Keywords+++++++++++++++++++++++++
D arr1d           S             20    DIM(10)
D table           S             10    DIM(20) ctdata
D mds             DS            20    occurs(30)
D num             S              5p 0

 * like_array will be defined with a dimension of 10\[char46]
 * array_dims will be defined with a value of 10\[char46]
D like_array      S                   like(arr1d) dim(%elem(arr1d))
D array_dims      C                   const (%elem (arr1d))

 /FREE
    num = %elem (arr1d);  // num is now 10
    num = %elem (table);  // num is now 20
    num = %elem (mds);    // num is now 30
 /END-FREE
.fi





In the following example, the standard way to reference the complex qualified
subfield \fIPET\fR  is 
.PP
.nf
family(x)\[char46]child(y)\[char46]pet
.fi


When specified as the parameter for \fB%ELEM\fR, it can be specified either with no indexes
specified for the data structure arrays, as in statement Â 1Â  or with all indexes specified for the
data structure arrays, as in statement Â 2Â \[char46]


.SH EXAMPLE

.PP
.nf
   DCL-DS family QUALIFIED DIM(3);
      name VARCHAR(25);
      numChildren INT(10);
      DCL-DS child DIM(10);
         name VARCHAR(25);
         numPets INT(10);
         pet VARCHAR(100) DIM(3);
      END-DS;
   END-DS;
   DCL-S x INT(10);

   x = %ELEM(family\[char46]child\[char46]pet);        // Â 1Â

   x = %ELEM(family(1)\[char46]child(1)\[char46]pet);  // Â 2Â
.fi


.SH SEE ALSO
.BR %LEN,
.BR %SIZE,
.BR DIM,
.BR OCCURS
