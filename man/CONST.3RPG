.\" Copyright 2017 Andreas Louv <andreas@louv.dk>
.\" All content is copyright IBM
.\" Original URL: https://www.ibm.com/support/knowledgecenter/ssw_ibm_i_73/rzasd/dconst.htm?view=embed
.\"
.\" This man page is generated with ``rpgleman''
.\" Project URL: https://github.com/andlrc/rpgleman
.\"
.TH CONST 3RPG  "June 2012" "ILE RPG Language Reference"
.SH NAME
CONST
.SH SYNOPSIS
.nf
CONST{(constant)}
.fi
.SH DESCRIPTION
.IP "" 2
.RS
\[bu] To specify the value of a named constant
.RE
.IP "" 2
.RS
\[bu] To indicate that a parameter passed by reference is read-only\[char46]
.RE
.PP

When specifying the value of a named constant, the \fICONST\fR keyword itself is optional\[char46] That is, the constant value can be specified with or without the \fICONST\fR keyword\[char46]


The parameter must be a literal, figurative constant, or built-in-function\[char46] The constant may be continued on subsequent lines by adhering to the appropriate continuation rules (see Continuation Rules for further details)\[char46]


If a named constant is used as a parameter for the keywords \fIDIM\fR, \fIOCCURS\fR, \fIPERRCD\fR, or \fIOVERLAY\fR, the named constant must be defined prior to its use\[char46]


When specifying a read-only reference parameter, you specify the keyword \fICONST\fR on the definition specification of the parameter definition on both the prototype and procedure interface\[char46] No parameter to the keyword is allowed\[char46]


When the keyword \fICONST\fR is specified, the compiler may copy the parameter to a temporary defined with the same data type and length as the prototyped parameter and pass the address of the temporary\[char46] Some conditions that would cause this are: the passed parameter is an expression or the passed parameter has a different format\[char46]



Do not use this keyword on a prototype definition unless you are sure that the parameter will not be changed by the called program or procedure\[char46]


If the called program or procedure is compiled using a procedure interface with the same prototype, you do not have to worry about this, since the compiler will check this for you\[char46]


Although a \fICONST\fR parameter cannot be changed by statements within the procedure, the value may be changed as a result of statements outside of the procedure, or by directly referencing a global variable\[char46]


Passing a parameter by constant value has the same advantages as passing by value\[char46] In particular, it allows you to pass literals and expressions\[char46]

