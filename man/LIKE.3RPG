.\" Copyright 2017 Andreas Louv <andreas@louv.dk>
.\" All content is copyright IBM
.\" Original URL: https://www.ibm.com/support/knowledgecenter/SS4QVT_8.5.1/com.ibm.etools.iseries.langref.doc/evfrilsh540.htm?view=embed
.\"
.\" This man page is generated with ``rpgleman''
.\" Project URL: https://github.com/andlrc/rpgleman
.\"
.TH LIKE 3RPG  2010-03-10 "ILE RPG Language Reference"
.SH NAME
LIKE
.SH SYNOPSIS
.nf
LIKE(name)
.fi
.SH DESCRIPTION
The \fILIKE\fR keyword is used to define an item like an existing one\[char46] For information about using \fILIKE\fR with an object, see \fILIKE\fR(object-name)\[char46]


When the \fILIKE\fR keyword is specified, the item being defined takes on the length and the data format of the item specified as the parameter\[char46] Standalone fields, prototypes, parameters, and data-structure subfields may be defined using this keyword\[char46] The parameter of \fILIKE\fR can be a standalone field, a data structure, a data structure subfield, a parameter in a procedure interface definition, or a prototype name\[char46] The data type entry (position 40) must be blank\[char46]


This keyword is similar to the \fI*LIKE\fR \fIDEFINE\fR operation code (see \fI*LIKE\fR \fIDEFINE\fR)\[char46] However, it differs from \fI*LIKE\fR \fIDEFINE\fR in that the defined data takes on the data format and \fICCSID\fR as well as the length\[char46]








If the parameter of \fILIKE\fR is a prototype, then the item being defined will have the same data type as the return value of the prototype\[char46] If there is no return value, then an error message is issued\[char46]


Here are some considerations for using the \fILIKE\fR keyword with different data types:


.IP "" 2
.RS
\[bu] 

 , the number specified in the To/Length entry is the number of additional (or fewer) characters\[char46]
.RE
.IP "" 2
.RS
\[bu] 

 , the number specified in the To/Length entry is the number of additional (or fewer) digits\[char46] For integer or unsigned fields, adjustment values must be such that the resulting number of digits for the field are 3, 5, 10, or 20\[char46] For float fields, length adjustment is not allowed\[char46]
.RE
.IP "" 2
.RS
\[bu] 

 , the number specified in the To/Length entry is the number of additional (or fewer) graphic or \fIUCS\fR-2 characters (1 graphic or \fIUCS\fR-2 character = 2 bytes)\[char46]
.RE
.IP "" 2
.RS
\[bu] 

 , the To/Length entry (positions 33-39) must be blank\[char46]
.RE
.PP

When \fILIKE\fR is used to define an array, the \fIDIM\fR keyword is still required to define the array dimensions\[char46] However, \fIDIM\fR(\fB%elem(array)\fR) can be used to define an array exactly like another array\[char46]


Use \fILIKEDS\fR to define a data structure like another data structure, with the same subfields\[char46]


The following are examples of defining data using the \fILIKE\fR keyword\[char46]



.SH EXAMPLE

Defining fields \fILIKE\fR other fields

.PP
.nf
*\[char46]\[char46] 1 \[char46]\[char46]\[char46]+\[char46]\[char46]\[char46] 2 \[char46]\[char46]\[char46]+\[char46]\[char46]\[char46] 3 \[char46]\[char46]\[char46]+\[char46]\[char46]\[char46] 4 \[char46]\[char46]\[char46]+\[char46]\[char46]\[char46] 5 \[char46]\[char46]\[char46]+\[char46]\[char46]\[char46] 6 \[char46]\[char46]\[char46]+\[char46]\[char46]\[char46] 7 \[char46]\[char46]\[char46]+\[char46]\[char46]\[char46] 8
DName+++++++++++ETDsFrom+++To/L+++IDc\[char46]Keywords+++++++++++++++++++++++++++++
D\[char46]\[char46]\[char46]\[char46]\[char46]\[char46]\[char46]\[char46]\[char46]\[char46]\[char46]\[char46]\[char46]\[char46]\[char46]\[char46]\[char46]\[char46]\[char46]\[char46]\[char46]\[char46]\[char46]\[char46]\[char46]\[char46]\[char46]\[char46]\[char46]\[char46]\[char46]\[char46]\[char46]\[char46]\[char46]\[char46]\[char46]Keywords+++++++++++++++++++++++++++++
 *
 *  Define a field like another with a length increase of 5 characters\[char46]
 *
D  Name           S             20
D  Long_name      S             +5    LIKE(Name)
 *
 *  Define a data structure subfield array with DIM(20) like another
 *  field and initialize each array element with the value *ALL\[char39]X\[char39]\[char46]
 *  Also, declare another subfield of type pointer immediately
 *  following the first subfield\[char46] Pointer is implicitly defined
 *  with a length of 16 bytes
 *
D  Struct         DS
D   Dim20                             LIKE(Name) DIM(20) INZ(*ALL\[char39]X\[char39])
D   Pointer                       *
 *
 *  Define a field which is based on the *LDA\[char46]  Take the length and type
 *  of the field from the field \[char39]Name\[char39]\[char46]
 *
D  Lda_fld        S                    LIKE(Name) DTAARA(*LDA)
.fi


















.SH SEE ALSO
.BR %ELEM (3RPG)
