.\" Copyright 2017 Andreas Louv <andreas@louv.dk>
.\" All content is copyright IBM
.\" Original URL: https://www.ibm.com/support/knowledgecenter/SS4QVT_8.5.1/com.ibm.etools.iseries.langref.doc/evfrilsh850.htm?view=embed
.\"
.\" This man page is generated with ``rpgleman''
.\" Project URL: https://github.com/andlrc/rpgleman
.\"
.TH KDS 3RPG  2010-03-10 "ILE RPG Language Reference"
.SH NAME
%KDS - Search Arguments in Data Structure
.SH SYNOPSIS
.nf
%KDS(data-structure-name{:num-keys})
.fi
.SH DESCRIPTION
\fB%KDS\fR is allowed as the search argument for any keyed Input/Output operation (\fICHAIN\fR, \fIDELETE\fR, \fIREADE\fR, \fIREADPE\fR, \fISETGT\fR, \fISETLL\fR) coded in a free-form group\[char46] The search argument is specified by the subfields of the data structure name coded as the first argument of the built-in function\[char46] The key data structure may be (but is not limited to), an externally described data structure with keyword \fIEXTNAME\fR(\[char46]\[char46]\[char46]:\fI*KEY\fR) or \fILIKEREC\fR(\[char46]\[char46]\[char46]:\fI*KEY\fR)\[char46]\[char46]






.IP 1. 2
.RS
The first argument must be the name of a data structure\[char46] This includes any subfield defined with keyword \fILIKEDS\fR or \fILIKEREC\fR\[char46]
.RE
.IP 2. 2
.RS
The second argument specifies how many of the subfields to use as the search argument\[char46]
.RE
.IP 3. 2
.RS
The individual key values in the compound key are taken from the top level subfields of the data structure\[char46] Subfields defined with \fILIKEDS\fR are considered character data\[char46]
.RE
.IP 4. 2
.RS
Subfields used to form the compound key must not be arrays\[char46]
.RE
.IP 5. 2
.RS
The types of all subfields (up to the number specified by "num-keys") must match the types of the actual keys\[char46] Where lengths and formats differ, the value is converted to the proper length and format\[char46]
.RE
.IP 6. 2
.RS
If the data structure is defined as an array data structure (using keyword \fIDIM\fR), an index must be supplied for the data structure\[char46]
.RE
.IP 7. 2
.RS
Opcode extenders H, M, or R specified on the keyed Input/Output operations code affect the moving of the search argument to the corresponding position in the key build area\[char46]
.RE
.PP

Example:



.SH EXAMPLE

Example of Search on Keyed Input/Output Operations

.PP
.nf
A\[char46]\[char46]\[char46]\[char46]\[char46]\[char46]\[char46]\[char46]\[char46]\[char46]T\[char46]Name++++++RLen++TDpB\[char46]\[char46]\[char46]\[char46]\[char46]\[char46]Functions++++++++++++++++++
A          R CUSTR
A            NAME         100A
A            ZIP           10A
A            ADDR         100A
A          K NAME
A          K ZIP
FFilename++IPEASF\[char46]\[char46]\[char46]\[char46]\[char46]L\[char46]\[char46]\[char46]\[char46]\[char46]A\[char46]Device+\[char46]Keywords+++++++++++++++++++++++++
Fcustfile  if   e           k disk    rename(CUSTR:custRec)
DName+++++++++++ETDsFrom+++To/L+++IDc\[char46]Keywords+++++++++++++++++++++++++
D custRecKeys     ds                  likerec(custRec : *key)
 \[char46]\[char46]\[char46]
 /free
         // custRecKeys is a qualified data structure
         custRecKeys\[char46]name = customer;
         custRecKeys\[char46]zip = zipcode;
         // the *KEY data structure is used as the search argument for CHAIN
         chain %kds(custRecKeys) custRec;
 /end-free

.fi


















