.\" Copyright 2017 Andreas Louv <andreas@louv.dk>
.\" All content is copyright IBM
.\"
.\" This man page is generated with ``rpgleman''
.\" Project URL: https://github.com/andlrc/rpgleman
.\"
.TH EDITC 3RPG  2010-03-10 "ILE RPG Language Reference"
.SH NAME
%EDITC - Edit Value Using an Editcode
.SH SYNOPSIS
.nf
%EDITC(numeric : editcode {: *ASTFILL | *CURSYM | currency-symbol})
.fi
.SH DESCRIPTION
The result of \fB%EDITC\fR is always the same length, and may contain leading and trailing blanks\[char46] For example, \fB%EDITC(\fINUM\fR : \[char39]A\[char39] : \[char39]$\[char39])\fR might return \[char39]$1,234\[char46]56CR\[char39] for one value of \fINUM\fR and \[char39]    $4\[char46]56  \[char39] for another value\[char46]


Float expressions are not allowed in the first parameter (you can use \fB%DEC\fR to convert a float to an editable format)\[char46] In the second parameter, the edit code is specified as a character constant; supported edit codes are: \[char39]A\[char39] - \[char39]D\[char39], \[char39]J\[char39] - \[char39]Q\[char39], \[char39]X\[char39] - \[char39]Z\[char39], \[char39]1\[char39] - \[char39]9\[char39]\[char46] The constant can be a literal, named constant or an expression whose value can be determined at compile time\[char46]


For more information, see Conversion Operations or Built-in Functions\[char46]






.SH RETURN VALUE
This function returns a character result representing the numeric value edited according to the edit code\[char46] In general, the rules for the numeric value and edit code are identical to those for editing numeric values in output specifications\[char46] The third parameter is optional, and if specified, must be one of: 


.TP 5
.B \fI*ASTFILL\fR
Indicates that asterisk protection is to be used\[char46] This means that leading zeros are replaced with asterisks in the returned value\[char46] For example, \fB%EDITC(-0012\[char46]5 : \[char39]K\[char39] : \fI*ASTFILL\fR)\fR returns \[char39]**\fI*12\fR\[char46]5-\[char39]\[char46] 
.TP 5
.B \fI*CURSYM\fR
Indicates that a floating currency symbol is to be used\[char46] The actual symbol will be the one specified on the control specification in the \fICURSYM\fR keyword, or the default, \[char39]$\[char39]\[char46] When \fI*CURSYM\fR is specified, the currency symbol is placed in the the result just before the first significant digit\[char46] For example, \fB%EDITC(0012\[char46]5 : \[char39]K\[char39] : \fI*CURSYM\fR)\fR returns \[char39]   $12\[char46]5 \[char39]\[char46] 
.TP 5
.B currency-symbol
Indicates that floating currency is to be used with the provided currency symbol\[char46] It must be a 1-byte character constant (literal, named constant or expression that can be evaluated at compile time)\[char46] For example, \fB%EDITC(0012\[char46]5 : \[char39]K\[char39] : \[char39]X\[char39])\fR returns \[char39]   X12\[char46]5 \[char39]\[char46] 
.SH EXAMPLE
\fB%EDITC\fR Example 1
.PP
.nf
DName+++++++++++ETDsFrom+++To/L+++IDc.Keywords+++++++++++++++++++++++++++
D msg             S            100A
D salary          S              9P 2 INZ(1000)
 * If the value of salary is 1000, then the value of salary * 12
 * is 12000.00. The edited version of salary * 12 using the A edit
 * code with floating currency is ' $12,000.00 '.
 * The value of msg is 'The annual salary is $12,000.00'
CL0N01Factor1+++++++Opcode&ExtExtended-factor2+++++++++++++++++++++++++++
C                   EVAL      msg = 'The annual salary is '
C                                + %trim(%editc(salary * 12
C                                              :'A': *CURSYM))
 * In the next example, the value of msg is 'The annual salary is &12,000.00'
C                   EVAL      msg = 'The annual salary is '
C                                + %trim(%editc(salary * 12
C                                              :'A': '&'))

 * In the next example, the value of msg is 'Salary is $*****12,000.00'
 * Note that the '$' comes from the text, not from the edit code.
C                   EVAL      msg = 'Salary is $'
C                                + %trim(%editc(salary * 12
C                                               :'B': *ASTFILL))

 * In the next example, the value of msg is 'The date is 1/14/1999'
C                   EVAL      msg = 'The date is '
C                                + %trim(%editc(*date : 'Y'))
.fi

A common requirement is to edit a field as follows: 


.IP \[bu] 2
Leading zeros are suppressed
.IP \[bu] 2
Parentheses are placed around the value if it is negative
.PP

The following accomplishes this using an \fB%EDITC\fR in a subprocedure:




.SH EXAMPLE
\fB%EDITC\fR Example 2
.PP
.nf
DName+++++++++++ETDsFrom+++To/L+++IDc.Keywords+++++++++++++++++++++++++++
D neg             S              5P 2      inz(-12.3)
D pos             S              5P 2      inz(54.32)
D editparens      PR            50A
D    val                        30P 2      value
D editedVal       S             10A
CL0N01Factor1+++++++Opcode&ExtExtended-factor2+++++++++++++++++++++++++++
C                   EVAL      editedVal = editparens(neg)
 * Now editedVal has the value '(12.30)   '
C                   EVAL      editedVal = editparens(pos)
 * Now editedVal has the value ' 54.32    '
 *---------------------------------------------------------------
 * Subprocedure EDITPARENS
 *---------------------------------------------------------------
P editparens      B
D editparens      PI            50A
D    val                        30P 2      value
D lparen          S              1A        inz(' ')
D rparen          S              1A        inz(' ')
D res             S             50A
 * Use parentheses if the value is negative
C                   IF        val < 0
C                   EVAL      lparen = '('
C                   EVAL      rparen = ')'
C                   ENDIF
 * Return the edited value
 * Note that the '1' edit code does not include a sign so we
 * don't have to calculate the absolute value.
C                   RETURN    lparen             +
C                             %editc(val : '1')  +
C                             rparen
P editparens      E
.fi


















.SH SEE ALSO
.BR %DEC (3RPG),
.BR %TRIM (3RPG)
