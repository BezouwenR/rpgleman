.\" Copyright 2017 Andreas Louv <andreas@louv.dk>
.\" All content is copyright IBM
.\" Original URL: https://www.ibm.com/support/knowledgecenter/ssw_ibm_i_73/rzasd/bbeditc.htm?view=embed
.\"
.\" This man page is generated with ``rpgleman''
.\" Project URL: https://github.com/andlrc/rpgleman
.\"
.TH EDITC 3RPG  "June 2012" "ILE RPG Language Reference"
.SH NAME
%EDITC - Edit Value Using an Editcode
.SH SYNOPSIS
.nf
%EDITC(numeric : editcode {: *ASTFILL | *CURSYM | currency-symbol})
.fi
.SH DESCRIPTION
The result of \fB%EDITC\fR is always the same length, and may contain leading and trailing blanks\[char46] For example, \fB%EDITC(\fINUM\fR : \[char39]A\[char39] : \[char39]$\[char39])\fR might return \[char39]$1,234\[char46]56CR\[char39] for one value of \fINUM\fR and \[char39]Â Â Â Â $4\[char46]56Â Â \[char39] for another value\[char46]


Float expressions are not allowed in the first parameter (you can use \fB%DEC\fR to convert a float to an editable format)\[char46] In the second parameter, the edit code is specified as a character constant; supported edit codes are: \[char39]A\[char39] - \[char39]D\[char39], \[char39]J\[char39] - \[char39]Q\[char39], \[char39]X\[char39] - \[char39]Z\[char39], \[char39]1\[char39] - \[char39]9\[char39]\[char46] The constant can be a literal, named constant or an expression whose value can be determined at compile time\[char46]


For more information, see Conversion Operations or Built-in Functions\[char46]


.SH EXAMPLE
\fB%EDITC\fR Example 1
.PP
.nf
DName+++++++++++ETDsFrom+++To/L+++IDc\[char46]Keywords+++++++++++++++++++++++++++
D msg             S            100A
D salary          S              9P 2 INZ(1000)
 * If the value of salary is 1000, then the value of salary * 12
 * is 12000\[char46]00\[char46] The edited version of salary * 12 using the A edit
 * code with floating currency is \[char39] $12,000\[char46]00 \[char39]\[char46]
 * The value of msg is \[char39]The annual salary is $12,000\[char46]00\[char39]
CL0N01Factor1+++++++Opcode&ExtExtended-factor2+++++++++++++++++++++++++++
C                   EVAL      msg = \[char39]The annual salary is \[char39]
C                                + %trim(%editc(salary * 12
C                                              :\[char39]A\[char39]: *CURSYM))
 * In the next example, the value of msg is \[char39]The annual salary is &12,000\[char46]00\[char39]
C                   EVAL      msg = \[char39]The annual salary is \[char39]
C                                + %trim(%editc(salary * 12
C                                              :\[char39]A\[char39]: \[char39]&\[char39]))

 * In the next example, the value of msg is \[char39]Salary is $*****12,000\[char46]00\[char39]
 * Note that the \[char39]$\[char39] comes from the text, not from the edit code\[char46]
C                   EVAL      msg = \[char39]Salary is $\[char39]
C                                + %trim(%editc(salary * 12
C                                               :\[char39]B\[char39]: *ASTFILL))

 * In the next example, the value of msg is \[char39]The date is 1/14/1999\[char39]
C                   EVAL      msg = \[char39]The date is \[char39]
C                                + %trim(%editc(*date : \[char39]Y\[char39]))
.fi

.IP "" 2
.RS
\[bu] Leading zeros are suppressed
.RE
.IP "" 2
.RS
\[bu] Parentheses are placed around the value if it is negative
.RE
.PP

The following accomplishes this using an \fB%EDITC\fR in a subprocedure:

.SH RETURN VALUE
.TP 5
.B \fI*ASTFILL\fR
Indicates that asterisk protection is to be used\[char46] This means that leading zeros are replaced with asterisks in the returned value\[char46] For example, \fB%EDITC\fR( -0012\[char46]5  : \[char39]K\[char39] : \fI*ASTFILL\fR) returns \[char39]**\fI*12\fR\[char46]5-\[char39]\[char46]
.TP 5
.B \fI*CURSYM\fR
Indicates that a floating currency symbol is to be used\[char46] The actual symbol will be the one specified on the control specification in the \fICURSYM\fR keyword, or the default, \[char39]$\[char39]\[char46] When \fI*CURSYM\fR is specified, the currency symbol is placed in the the result just before the first significant digit\[char46] For example, \fB%EDITC(0012\[char46]5 : \[char39]K\[char39] : \fI*CURSYM\fR)\fR returns \[char39]Â Â Â $12\[char46]5Â \[char39] \[char46]
.TP 5
.B currency-symbol
Indicates that floating currency is to be used with the provided currency symbol\[char46] It must be a 1-byte character constant (literal, named constant or expression that can be evaluated at compile time)\[char46] For example, \fB%EDITC(0012\[char46]5 : \[char39]K\[char39] : \[char39]X\[char39])\fR returns \[char39]Â Â Â X12\[char46]5Â \[char39]\[char46]
.PP
.SH EXAMPLE
\fB%EDITC\fR Example 2
.PP
.nf
DName+++++++++++ETDsFrom+++To/L+++IDc\[char46]Keywords+++++++++++++++++++++++++++
D neg             S              5P 2      inz(-12\[char46]3)
D pos             S              5P 2      inz(54\[char46]32)
D editparens      PR            50A
D    val                        30P 2      value
D editedVal       S             10A
CL0N01Factor1+++++++Opcode&ExtExtended-factor2+++++++++++++++++++++++++++
C                   EVAL      editedVal = editparens(neg)
 * Now editedVal has the value \[char39](12\[char46]30)   \[char39]
C                   EVAL      editedVal = editparens(pos)
 * Now editedVal has the value \[char39] 54\[char46]32    \[char39]
 *---------------------------------------------------------------
 * Subprocedure EDITPARENS
 *---------------------------------------------------------------
P editparens      B
D editparens      PI            50A
D    val                        30P 2      value
D lparen          S              1A        inz(\[char39] \[char39])
D rparen          S              1A        inz(\[char39] \[char39])
D res             S             50A
 * Use parentheses if the value is negative
C                   IF        val < 0
C                   EVAL      lparen = \[char39](\[char39]
C                   EVAL      rparen = \[char39])\[char39]
C                   ENDIF
 * Return the edited value
 * Note that the \[char39]1\[char39] edit code does not include a sign so we
 * don\[char39]t have to calculate the absolute value\[char46]
C                   RETURN    lparen             +
C                             %editc(val : \[char39]1\[char39])  +
C                             rparen
P editparens      E
.fi
.SH SEE ALSO
.BR %DEC (3RPG),
.BR %TRIM (3RPG)
