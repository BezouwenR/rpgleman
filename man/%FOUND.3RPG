.\" Copyright 2017 Andreas Louv <andreas@louv.dk>
.\" All content is copyright IBM
.\"
.\" This man page is generated with ``rpgleman''
.\" Project URL: https://github.com/andlrc/rpgleman
.\"
.TH FOUND 3RPG  2010-03-10 "ILE RPG Language Reference"
.SH NAME
%FOUND - Return Found Condition
.SH SYNOPSIS
.nf
%FOUND{(file_name)}
.fi
.SH DESCRIPTION
The operations that set \fB%FOUND\fR are:


.IP \[bu] 2
File operations: CHAIN (Random Retrieval from a File)DELETE (Delete Record)SETGT (Set Greater Than)SETLL (Set Lower Limit)
.IP \[bu] 2
String operations: CHECK (Check Characters)CHECKR (Check Reverse)SCAN (Scan String) Note:Built-in function %SCAN does not change the value of %FOUND\[char46]
.IP \[bu] 2
Search operations: LOOKUP (Look Up a Table or Array Element)
.PP

If \fB%FOUND\fR is used without the optional file_name parameter, then it returns the value set for the most recent relevant operation\[char46] When a file_name is specified, then it applies to the most recent relevant operation on that file\[char46]


For file operations, \fB%FOUND\fR is opposite in function to the "no record found NR" indicator\[char46]


For string operations, \fB%FOUND\fR is the same in function as the "found FD" indicator\[char46]


For the \fILOOKUP\fR operation, \fB%FOUND\fR returns \[char39]1\[char39] if the operation found an element satisfying the search conditions\[char46] For an example of \fB%FOUND\fR with \fILOOKUP\fR, see Figure Figure 217\[char46]


For more information, see File Operations, Result Operations, or Built-in Functions\[char46]



.SH RETURN VALUE
\fB%FOUND\fR returns \[char39]1\[char39] if the most recent relevant file operation found a record, a string operation found a match, or a search operation found an element\[char46] Otherwise, this function returns \[char39]0\[char39]\[char46]

.SH EXAMPLE

\fB%FOUND\fR used to Test a File Operation without a Parameter

.PP
.nf
 *\[char46]\[char46]1\[char46]\[char46]\[char46]\[char46]+\[char46]\[char46]\[char46]\[char46]2\[char46]\[char46]\[char46]\[char46]+\[char46]\[char46]\[char46]\[char46]3\[char46]\[char46]\[char46]\[char46]+\[char46]\[char46]\[char46]\[char46]4\[char46]\[char46]\[char46]\[char46]+\[char46]\[char46]\[char46]\[char46]5\[char46]\[char46]\[char46]\[char46]+\[char46]\[char46]\[char46]\[char46]6\[char46]\[char46]\[char46]\[char46]+\[char46]\[char46]\[char46]\[char46]7\[char46]\[char46]\[char46]+\[char46]\[char46]\[char46]\[char46]
F*Filename+IPEASFRlen+LKlen+AIDevice+\[char46]Keywords+++++++++++++++++++++++++
 * File CUSTS has record format CUSTREC
FCUSTS     IF   E           K DISK

 /FREE
    // Check if the customer is in the file
    chain Cust CustRec;
    if %found;
       exsr HandleCustomer;
    endif;
 /END-FREE
.fi



.SH EXAMPLE

\fB%FOUND\fR used to Test a File Operation with a Parameter

.PP
.nf
 *\[char46]\[char46]1\[char46]\[char46]\[char46]\[char46]+\[char46]\[char46]\[char46]\[char46]2\[char46]\[char46]\[char46]\[char46]+\[char46]\[char46]\[char46]\[char46]3\[char46]\[char46]\[char46]\[char46]+\[char46]\[char46]\[char46]\[char46]4\[char46]\[char46]\[char46]\[char46]+\[char46]\[char46]\[char46]\[char46]5\[char46]\[char46]\[char46]\[char46]+\[char46]\[char46]\[char46]\[char46]6\[char46]\[char46]\[char46]\[char46]+\[char46]\[char46]\[char46]\[char46]7\[char46]\[char46]\[char46]+\[char46]\[char46]\[char46]\[char46]
F*Filename+IPEASFRlen+LKlen+AIDevice+\[char46]Keywords+++++++++++++++++++++++++
 * File MASTER has all the customers
 * File GOLD has only the "privileged" customers
FMASTER    IF   E           K DISK
FGOLD      IF   E           K DISK

 /FREE
   // Check if the customer exists, but is not a privileged customer
   chain Cust MastRec;
   chain Cust GoldRec;

   // Note that the file name is used for %FOUND, not the record name
   if  %found (Master)  and not  %found (Gold);
   //
   endif;
 /END-FREE
.fi



.SH EXAMPLE

\fB%FOUND\fR used to Test a String Operation

.PP
.nf
*\[char46]\[char46]\[char46]1\[char46]\[char46]\[char46]\[char46]+\[char46]\[char46]\[char46]\[char46]2\[char46]\[char46]\[char46]\[char46]+\[char46]\[char46]\[char46]\[char46]3\[char46]\[char46]\[char46]\[char46]+\[char46]\[char46]\[char46]\[char46]4\[char46]\[char46]\[char46]\[char46]+\[char46]\[char46]\[char46]\[char46]5\[char46]\[char46]\[char46]\[char46]+\[char46]\[char46]\[char46]\[char46]6\[char46]\[char46]\[char46]\[char46]+\[char46]\[char46]\[char46]\[char46]7\[char46]\[char46]\[char46]+\[char46]\[char46]\[char46]\[char46]
DName+++++++++++ETDsFrom+++To/L+++IDc\[char46]Keywords+++++++++++++++++++++++++++
D Numbers         C                   \[char39]0123456789\[char39]
D Position        S              5I 0
CL0N01Factor1+++++++Opcode(E)+Factor2+++++++Result++++++++Len++D+HiLoEq\[char46]\[char46]\[char46]\[char46]
 * If the actual position of the name is not required, just use
 * %FOUND to test the results of the SCAN operation\[char46]
 * If Name has the value \[char39]Barbara\[char39] and Line has the value
 * \[char39]in the city of Toronto\[char46]      \[char39], then %FOUND will return \[char39]0\[char39]\[char46]
 * If Line has the value \[char39]the city of Toronto where Barbara lives, \[char39]
 * then %FOUND will return \[char39]1\[char39]\[char46]
C     Name          SCAN      Line
C                   IF        %FOUND
C                   EXSR      PutLine
C                   ENDIF
 * If Value contains the value \[char39]12345\[char46]67\[char39], Position would be set
 * to 6 and %FOUND would return the value \[char39]1\[char39]\[char46]
 * If Value contains the value \[char39]10203040\[char39], Position would be set
 * to 0 and %FOUND would return the value \[char39]0\[char39]\[char46]
C     Numbers       CHECK     Value         Position
C                   IF        %FOUND
C                   EXSR      HandleNonNum
C                   ENDIF
.fi


















.SH SEE ALSO
.BR %SCAN (3RPG)
