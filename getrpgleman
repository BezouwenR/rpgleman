#!/usr/bin/env perl

use strict;
use warnings;

use HTTP::Tiny;
use HTML::TreeBuilder::XPath;
use POSIX qw{strftime};
use Getopt::Long qw{:config no_ignore_case gnu_compat bundling};
use Data::Dumper;

our $DEBUG = 0;

sub trim
{
	my ($text) = @_;
	s/^\s+//;
	s/\s+$//;
	return $text;
}

sub man_build
{
	my ($man) = @_;

	for my $short_name (@{$man->{short_names}}) {
		$short_name =~ s{ \h+ }{_}xmsg,

		my $out_dir  = "man/man$man->{section}";
		my $out_file = "$out_dir/$short_name.$man->{section}";
		mkdir $out_dir or die("$out_dir $!") unless -d $out_dir;
		print STDERR "$out_file: File already exists, overriding...\n"
			if $DEBUG && -e $out_file;
		open (my $fh, '>:utf8', $out_file) or die("$out_file $!");

		# Header
		print $fh ".\\\" Copyright 2017 Andreas Louv <andreas\@louv.dk>\n";
		print $fh ".\\\" All content is copyright IBM\n";
		print $fh ".\\\" Original URL: $man->{url}\n";
		print $fh ".\\\"\n";
		print $fh ".\\\" This man page is generated with \`\`rpgleman''\n";
		print $fh ".\\\" Project URL: https://github.com/andlrc/rpgleman\n";
		print $fh ".\\\"\n";
		print $fh ".TH " . join(" ", (
			$short_name =~ s{ % }{}xmsr,
			$man->{section},
			"",
			$man->{date},
			'"ILE RPG Language Reference"')) . "\n";

		# NAME
		print $fh ".SH NAME\n";
		if ($man->{name}) {
			print $fh "${short_name} - $man->{name}\n";
		} else {
			print $fh "${short_name}\n";
		}

		# SYNOPSIS
		if ($man->{synopsis}) {
			print $fh ".SH SYNOPSIS\n";
			print $fh ".nf\n";
			print $fh $man->{synopsis} . "\n";
			print $fh ".fi\n";
		}

		print $fh ".SH DESCRIPTION\n";
		print $fh join("\n\n", map {
			man_node($_);
		} @{$man->{description}}) . "\n";

		if (@{$man->{return_value}}) {
			print $fh ".SH RETURN VALUE\n";
			print $fh join("\n\n", map {
				man_node($_);
			} @{$man->{return_value}}) . "\n";
		}

		if (@{$man->{notice}}) {
			print $fh ".SH NOTICE\n";
			print $fh join("\n\n", map {
				man_node($_, 1);
			} @{$man->{notice}}) . "\n";
		}

		if (@{$man->{examples}}) {
			print $fh join("\n\n", map {
				man_node($_);
			} @{$man->{examples}}) . "\n";
		}

		if (@{$man->{see_also}}) {
			print $fh ".SH SEE ALSO\n";
			print $fh join(",\n", map {
				".BR $_";
			} sort {
				$a cmp $b;
			} @{$man->{see_also}}) . "\n";
		}

		close($fh);
	}
}

sub man_node
{
	my ($node, $print_text) = @_;
	my $tag_name = $node->{_tag};
	my $class    = $node->attr('class') || '';

	# <p>-tags
	if ($tag_name =~ m{ \b p \b }xms) {
		return man_highlight($node->as_text . "\n");
	}

	# <dl>-tags
	if ($tag_name =~ m{ \b dl \b }xms) {
		my @dt_nodes = $node->findnodes_as_strings('dt');
		my @dd_nodes = $node->findnodes('dd');
		my @ret = ();
		for my $i (0..$#dt_nodes) {
			push @ret, join("\n",
				".TP 5",
				".B " . man_highlight($dt_nodes[$i]),
				man_node($dd_nodes[$i], 1)
			);
		}
		push @ret, ".PP";
		return join "\n", @ret;
	}

	# Unordered Lists
	if ($tag_name =~ m{ \b ul \b }xms) {
		return join("\n", map {
			join("\n",
				'.IP "" 2',
				".RS",
				"\\[bu] " . trim(man_node($_, 1)),
				".RE"
			);
		} $node->findnodes('li')). "\n.PP";
	}

	# Ordered Lists
	if ($tag_name =~ m{ \b ol \b }xms) {
		my @items = $node->findnodes('li');
		my $index = 0;
		return join("\n", map {
			join("\n",
				'.IP ' . (++$index) . '. 2',
				".RS",
				man_node($_, 1),
				".RE"
			);
		} @items) . "\n.PP";
	}

	# Code
	if ($tag_name =~ m{ \b pre \b }xms) {
		return join("\n",
			".PP",
			".nf",
			man_sanitize($node->as_text),
			".fi"
		);
	}

	# Tables
	if ($tag_name =~ m{ \b table \b }xms) {
		my @rows = ();
		my $size = -1;

		for my $tr ($node->findnodes('thead/tr'), $node->findnodes('tbody/tr')) {
			my @columns = ($tr->findnodes_as_strings('th'), $tr->findnodes_as_strings('td'));
			if ($columns[0] !~ m{ ^ \h* Note }xms) {
				$size = @columns if (@columns > $size);
				push @rows, \@columns;
			}
		}

		return join("\n",
			".TS",
			"allbox;",
			("l " x $size) . " .",
			join("\n", map {
				join("\t", map {
					"T{\n" . man_highlight($_) . "\nT}";
				} @{$_});
			} @rows),
			".TE");
	}

	# Code Blocks
	if ($class =~ m{ \b fig \b }xms) {
		my @ex_nodes = $node->findnodes('*');
		if (@ex_nodes >= 1) {
			my $cap = '';
			if (($ex_nodes[0]->attr('class') || '') =~ m{
				\b figcap \b
			}xms) {
				$cap = shift(@ex_nodes)->as_text; 
			}
			$cap =~ s{ Figure \h+ \d+ . \h* }{}xms;
			my $ex_body = trim(join("\n\n",
				map {
					man_node($_);
				} @ex_nodes[0..$#ex_nodes]
			));
			if ($ex_body =~ m{ \S }xms) {
				return join("\n",
					".SH EXAMPLE",
					man_highlight($cap),
					$ex_body
				);
			} else {
				return '';
			}
		} else {
			return '';
		}
	}

	# Print literal text (textNode)'s and element nodes:
	if ($print_text) {
		return join(" ", map {
			if (!ref) {
				man_highlight(trim($_));
			} elsif ($_->{_tag} =~ m{
				\b (a|b|i|em|span|samp|string|var) \b
			}xmsi) {
				man_highlight(trim($_->as_text));
			} else {
				"\n" . man_node($_) . "\n";
			}
		} @{$node->{_content}});
	}
	else {
		# <div class="p">-tags
		if ($tag_name =~ m{ \b div \b }xms && $class =~ m{ \b p \b }xms) {
			return man_node($node, 1);
		} else {
			# Sometimes nodes is wrapped.
			return join("\n\n", map {
				man_node($_);
			} $node->findnodes("*"));
		}
	}
}

sub man_sanitize
{
	my ($text) = @_;
	# Escape
	$text =~ s{ [.'] }{ "\\[char" . ord($&) . "]"}xmsge;
	# Right Trim
	$text =~ s{ \h+ $ }{}xmsg;
	return $text;
}

sub man_highlight
{
	my ($text) = @_;
	$text = man_sanitize($text);
	# ABC-DEF
	$text =~ s{ \b (?<! [%*] ) [A-Z]{3,} (?: - [A-Z]{3,} )* }{\\fI$&\\fR}xmsg;
	# %ABC
	$text =~ s{ %\w+ (?: \( .*? \) )? }{\\fB$&\\fR}xmsg;
	# *ABC
	$text =~ s{ \*\w+ }{\\fI$&\\fR}xmsg;
	return $text;
}

sub read_url
{
	my ($url, $config) = @_;

	my $resp = HTTP::Tiny->new->get($url);
	if (!$resp->{success}) {
		print STDERR $resp->{reason} . "\n" . $resp->{content};
		return 1;
	}

	my $man = {
		"url" => "$url",
		"date" => strftime("%Y-%m-%d", localtime),
		"section" => "3RPG",
		"name" => "",
		"orig_short_name" => "",
		"short_names" => [],
		"synopsis" => "",
		"description" => [],
		"notice" => [],
		"examples" => [],
		"return_value" => [],
		"see_also" => []
	};

	for (keys %{$config}) {
		$man->{$_} = $config->{$_} if defined $config->{$_};
	}

	my $tree = HTML::TreeBuilder::XPath->new;
	my $content = $resp->{content};
	$content =~ s{ \r }{}xmsg;
	$tree->parse_content($content);

	# Take change date from page if provided:
	for ($tree->findnodes('//meta')) {
		$man->{date} = '"' . $_->attr('content') . '"'
			if (($_->attr('name') || '') =~ m{ DC\.date }xmsi);
	}

	# Name
	my $nameText = ($tree->findnodes_as_strings('//h1'))[0];
	if ($man->{orig_short_name}) {
		$man->{name} = $nameText;
	} elsif ($nameText =~ m{ ( %? \w+ ) \h+ \( (.*) \) }xms) {
		$man->{name} = $2;
		$man->{orig_short_name} = $1;
	} else {
		$nameText =~ m{ ( \w+ ) }xms;
		$man->{orig_short_name} = $1;
	}
	push @{$man->{short_names}}, $man->{orig_short_name};

	# Sometimes the name is the synopsis
	$man->{synopsis} = $nameText if $nameText =~ m{ ^ \w+ [\{\(] }xms;

	my @nodes = $tree->findnodes('//*[@class="body"]/*');

	# Synopsis
	while ($nodes[0] && $nodes[0]->{_tag} =~ m{ \b (?:a|img|span) \b }xmsi) {
		shift @nodes;
	}
	if ($nodes[0] && $nodes[0]->{_tag} =~ m{ \b pre \b }xmsi) {
		$man->{synopsis} = $nodes[0]->as_text;
		my @short_names = do {
			my %seen = ();
			grep { !$seen{$_}++ } $man->{synopsis} =~ m{ % \w+ (?= \( ) }xmsg;
		};
		$man->{short_names} = \@short_names if @short_names > 1;

		shift @nodes;
	}

	# Return Value
	while ($nodes[0] && $nodes[0]->as_text =~ m{ \b returns \b }xmsi) {
		push @{$man->{return_value}}, shift @nodes;

		# Check if a list follows
		if ($nodes[0]->{_tag} =~ m{ \b (?: dl | ul | ol ) \b }xmsi) {
			push @{$man->{return_value}}, shift @nodes;
		}
	}

	# Description
	while ($nodes[0]
		&& ($nodes[0]->attr('class') || '') !~ m{
			\b (?:fig|section) \b
		}xmsi) {
		# Tip, Note, Warning and Cautions:
		if (($nodes[0]->attr('class') || '') =~ m{ \b (?: note | noteParent ) \b }xms) {
			push @{$man->{notice}}, shift @nodes;
		} else {
			push @{$man->{description}}, shift @nodes;
		}
	}

	while ($nodes[0]) {
		push @{$man->{examples}}, shift @nodes;
	}

	@{$man->{see_also}} = do {
		my %seen = ();
		grep {
			my $name = $_;
			!$seen{$name}++ && !grep {
				m{ ^ \Q$name\E $ }xmsi;
			} @{$man->{short_names}}, $man->{orig_short_name};
		} map { uc } $tree->findnodes_as_string('//body') =~ m{
			( % \w+ | (?<! [%*]) [A-Z]{3,} (?: - [A-Z]{3,} )* )
		}xmsg;
	};

	man_build($man);
	$tree->delete;
}

my $man = {};
GetOptions(
	'n|name=s' => \$man->{orig_short_name},
	's|section=s' => \$man->{section},
	'd|debug' => \$DEBUG
) or exit 1;

for (@ARGV) {
	my $url = "https://www.ibm.com/support/knowledgecenter/ssw_ibm_i_73/rzasd/$_.htm?view=embed";
	exit 1 if read_url($url, $man);
}

# vim: tabstop=4 shiftwidth=4
